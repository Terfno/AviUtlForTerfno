@パーティクル
--track0:生存周期,0,3000,10
--track1:放出半径,0,1000,100
--track2:放出ﾗﾝﾀﾞﾑ,0,1000,0
--track3:放出速度,0,1000,10
--dialog:放出周期[ﾌﾚｰﾑ],T=10;放出数,num=5;回転速度(ﾗﾝﾀﾞﾑ),rot_speed=0;重力,grav=0;床y座標,y_yuka=5000;カメラ向描画/chk,checkCAM=0;ライン上発生/chk,checkLINE=0;ライン頂点数,line_num=2;ライン座標,line_pos={0,0,0,100,0,0};円上発生/chk,checkEN=0;円半径,en_R=30;放出点をきれいに分布/chk,checkB=0;

require("function_rotate_T")

if checkLINE== 1 then
 obj.setanchor("line_pos", line_num ,"xyz")
end

--点を計算する関数
local function func(i,j,frame,framerate,obj,R,rand_range,diff_vec,obj,plus_x,plus_y,plus_z)

 local rand_x=obj.rand(-rand_range,rand_range,i+j*1000,1)
 local rand_y=obj.rand(-rand_range,rand_range,i+j*2000,2)
 local rand_z=obj.rand(-rand_range,rand_range,i+j*3000,3)
 
 local rand_rx=obj.rand(0,359,i+j*1000,4)
 local rand_ry=obj.rand(0,359,i+j*2000,5)
 local rand_rz=obj.rand(0,359,i+j*3000,6)

 local Rx,Ry,Rz=R,0,0

 Rx,Ry,Rz=Rot(Rx,Ry,Rz,math.rad(rand_rx),math.rad(rand_ry),math.rad(rand_rz))

 local x=(Rx+rand_x)*(1-math.exp(-(frame-i)*diff_vec))+plus_x
 local y=(Ry+rand_y)*(1-math.exp(-(frame-i)*diff_vec))+plus_y
 local z=(Rz+rand_z)*(1-math.exp(-(frame-i)*diff_vec))+plus_z

 return x,y,z

end

local function get_pos_line(i,j)

 if line_num <= 1 then return 0,0,0 end

 local x,y,z
 local sec,per
 if checkB==1 then

--[[
  --ラインの長さを判断して、均等に分布させたかったが。。。
  -- 全体の長さ
  L = 0
  l = {}
  for k=1,line_num-1 do
   local dis_r = math.sqrt((line_pos[k+1]-line_pos[3*k+1])^2 + (line_pos[k+2]-line_pos[3*k+2])^2 + (line_pos[k+3]-line_pos[3*k+3])^2)
   l[k] = dis_r
   L = L + dis_r
  end
   dl = L/(num-1)
  local point_l = dl*(j-1)
  local now_sec = 0
  local now_l = 0
  local now_i = 1
  local temp_l = 0
  local temp_sec = 0
  for k=1, #l do
   temp_l = now_l
   if now_l < point_l and point_l < now_l + l[k] then temp_sec = k-1 break end
   now_l = now_l + l[k]
  end
   sec = temp_sec
   per = (point_l - temp_l) / l[temp_sec+1] * 100

   if j == 1 then per = 0 end
   if (L-point_l) < 0.01 then per = 100 end
]]--

   if j==num then
    sec = line_num-2
    per = 100
   else
    dnum = (num-1) / (line_num-1)
    sec = math.floor((j-1)/(dnum))
    per = ((j-1)%dnum)/dnum * 100
   end
 else
  sec = obj.rand(1,line_num-1,i+j*3000,7)-1
  per = obj.rand(0,99,        i+j*3000,8)
 end

 local a = sec*3
 local b = a + 3
 local t = i/obj.frame
 local erx,ery,erz = obj.getvalue("rx",t), obj.getvalue("ry",t), obj.getvalue("rz",t)
 local lax,lay,laz=Rot(line_pos[a+1],line_pos[a+2],line_pos[a+3],math.rad(erx),math.rad(ery),math.rad(erz))
 local lbx,lby,lbz=Rot(line_pos[b+1],line_pos[b+2],line_pos[b+3],math.rad(erx),math.rad(ery),math.rad(erz))

 x = lax + (lbx - lax)*per/100
 y = lay + (lby - lay)*per/100
 z = laz + (lbz - laz)*per/100

 return x,y,z 
end

local function get_pos_circle(i,j)

 if line_num <= 1 then return 0,0,0 end

 local x,y,z
 local deg
 if checkB==1 then 
  deg = 360 * (j-1)/(num)
 else
  deg = obj.rand(0,359,        i+j*3000,9)
 end
 local ex,ey,ez = en_R*math.cos(math.rad(deg)), en_R*math.sin(math.rad(deg)),0
 t = i/obj.frame
 local erx,ery,erz = obj.getvalue("rx",t), obj.getvalue("ry",t), obj.getvalue("rz",t)
 ex,ey,ez=Rot(ex,ey,ez,math.rad(erx),math.rad(ery),math.rad(erz))

 return ex,ey,ez
end

local R=obj.track1
local rand_range=obj.track2
local exp=math.exp
local diff_vec=obj.track3/1000
local density=T

local fig="円"
local col="0xffffff"

local rx,ry,rz=0,0,0
local vrx,vry,vrz
local plus_rx,plus_ry,plus_rz

local time=0
local frame_num=(obj.frame-obj.frame%density)/density
local live_num=obj.track0
local live_frame=live_num*density
local fade_frame=5

local vx1,vy1,vz1,vx0,vy0,vz0=0,0,0,0,0,0

local x1,y1,z1,x0,y0,z0
local i,j,J

pos_array = {}
pos_cen_array = {}
alpha_array = {}
array_i = 1
local array_j = 1

obj.copybuffer("tmp","obj")

local s = (frame_num-live_num)*density
local e = obj.frame - obj.frame%density

--現在のフレームまで
for i=s,e,density do

 pos_array[array_i] = {}
 pos_cen_array[array_i] = {}
 alpha_array[array_i] = {}

 --1周期で描く数
 for j=1,num do

  -- LOAD
  obj.load("tempbuffer")

  if checkCAM==1 then
   obj.setoption("billboard",3)
  else
   obj.setoption("billboard",0)
  end

  plus_x,plus_y,plus_z=obj.getvalue("x",i/obj.framerate),obj.getvalue("y",i/obj.framerate),obj.getvalue("z",i/obj.framerate)
  plus_ox,plus_oy,plus_oz=-obj.getvalue("x",obj.frame/obj.framerate),-obj.getvalue("y",obj.frame/obj.framerate),-obj.getvalue("z",obj.frame/obj.framerate)

  x1,y1,z1=func(i,j,obj.frame,obj.framerate,obj,R,0,diff_vec,obj,plus_x+plus_ox,plus_y+plus_oy,plus_z+plus_oz)

  -- line
  if checkLINE==1 then
   local lx,ly,lz = get_pos_line(i,j)
   x1 = x1 + lx
   y1 = y1 + ly
   z1 = z1 + lz
  elseif checkEN==1 then
   local lx,ly,lz = get_pos_circle(i,j)
   x1 = x1 + lx
   y1 = y1 + ly
   z1 = z1 + lz
  end  

  -- rand
  x1 = x1 + obj.rand(-rand_range,rand_range,i+j*1000,1)
  y1 = y1 + obj.rand(-rand_range,rand_range,i+j*2000,2)
  z1 = z1 + obj.rand(-rand_range,rand_range,i+j*3000,3)
 
  y1=y1+grav*(i-obj.frame)^2/1000

  if y1>y_yuka+plus_oy then
   y1=y_yuka+plus_oy
  end
  
  if rot_speed>0 then
   vrx=obj.rand(0,rot_speed,i*100+j*1000,10)
   vry=obj.rand(0,rot_speed,i*200+j*2000,11)
   vrz=obj.rand(0,rot_speed,i*300+j*3000,12)

   plus_rx=obj.rand(0,359,i+j*1000,13)
   plus_ry=obj.rand(0,359,i+j*2000,14)
   plus_rz=obj.rand(0,359,i+j*3000,15)
 
   rx=plus_rx+vrx*(obj.time)
   ry=plus_ry+vry*(obj.time)
   rz=plus_rz+vrz*(obj.time)
  end

  --[[パーティクル描画]]--

  if i<obj.frame-live_frame+fade_frame then
   obj.alpha=(i-obj.frame+live_frame)/fade_frame
  end

   obj.rx=math.deg(rx)
   obj.ry=math.deg(ry)
   obj.rz=math.deg(rz)

   pos_cen_array[array_i][j] = {}
   pos_array[array_i][j] = {}

   if i >= 0 then

    obj.effect()
    obj.draw(x1,y1,z1)

    pos_cen_array[array_i][j][1] = obj.x 
    pos_cen_array[array_i][j][2] = obj.y
    pos_cen_array[array_i][j][3] = obj.z
    pos_array[array_i][j][1] = x1 + obj.x
    pos_array[array_i][j][2] = y1 + obj.y
    pos_array[array_i][j][3] = z1 + obj.z
    alpha_array[array_i][j] = obj.alpha

   else

    alpha_array[array_i][j] = 0

   end


 --------------------------
 end

 array_i = array_i + 1

end

@線
--track0:線密度,0,3000,10
--track1:結合距離,0,3000,0
--track2:タイプ,0,3,0,1
--track3:ｶﾒﾗ向描画,0,1,1,1;

local line_density=obj.track0
local connect_R = obj.track1
local type = obj.track2
local checkCAM=obj.track3

local checkSEN_N, checkSEN_R, checkSEN_W, checkSEN_C

if type==0 then checkSEN_N=1 end
if type==1 then checkSEN_R=1 end
if type==2 then checkSEN_W=1 end
if type==3 then checkSEN_C=1 end


--線を引く関数
local function draw_line_3D(x0,y0,z0,x1,y1,z1,density,obj)

 local L=math.sqrt((x1-x0)^2+(y1-y0)^2+(z1-z0)^2)
 local N=L*density

 local dx=(x1-x0)/N
 local dy=(y1-y0)/N
 local dz=(z1-z0)/N
 local x,y,z=0,0,0

 for i=1,N do
  x=x0+dx*i
  y=y0+dy*i
  z=z0+dz*i
  obj.draw(x,y,z,1,1)
 end

 --obj.draw(x1,y1,z1)

end

  if checkCAM==1 then
   obj.setoption("billboard",3)
  else
   obj.setoption("billboard",0)
  end

  --[[線描画 n]]--

  if checkSEN_N == 1 then

    for k=1, #pos_array do
    for l=1, #pos_array[k] do
    for K=1, #pos_array do
    for L=1, #pos_array[K] do
     obj.alpha = math.min(alpha_array[k][l],alpha_array[K][L])
     if obj.alpha > 0 then
      local dis_r = math.sqrt((pos_array[k][l][1]-pos_array[K][L][1])^2 + (pos_array[k][l][2]-pos_array[K][L][2])^2 + (pos_array[k][l][3]-pos_array[K][L][3])^2)
      if dis_r < connect_R and dis_r > 0 then
       draw_line_3D(pos_array[k][l][1],pos_array[k][l][2],pos_array[k][l][3],pos_array[K][L][1],pos_array[K][L][2],pos_array[K][L][3],line_density/100,obj)
      end
     end
    end
    end
    end
    end

  end

  --[[線描画 w]]--
  if checkSEN_W==1 then

    for k=1, #pos_array do
    for l=1, #pos_array[k] do
     obj.alpha = alpha_array[k][l]
     if obj.alpha > 0 then
      local K = k
      local L = l + 1
      if L > #pos_array[k] then L = 1 end
      local dis_r = math.sqrt((pos_array[k][l][1]-pos_array[K][L][1])^2 + (pos_array[k][l][2]-pos_array[K][L][2])^2 + (pos_array[k][l][3]-pos_array[K][L][3])^2)
      if dis_r < connect_R and dis_r > 0 then
       draw_line_3D(
          pos_array[k][l][1],pos_array[k][l][2],pos_array[k][l][3],
          pos_array[K][L][1],pos_array[K][L][2],pos_array[K][L][3],line_density/100,obj)
      end
     end
    end
    end

  end

  --[[線描画 r]]--
  if checkSEN_R==1 then

    for k=1, #pos_array-1 do
    for l=1, #pos_array[k] do
     obj.alpha = alpha_array[k][l]
     if obj.alpha > 0 then
      local K = k + 1
      local L = l
      local dis_r = math.sqrt((pos_array[k][l][1]-pos_array[K][L][1])^2 + (pos_array[k][l][2]-pos_array[K][L][2])^2 + (pos_array[k][l][3]-pos_array[K][L][3])^2)
      if dis_r < connect_R and dis_r > 0 then
       draw_line_3D(
          pos_array[k][l][1],pos_array[k][l][2],pos_array[k][l][3],
          pos_array[K][L][1],pos_array[K][L][2],pos_array[K][L][3],line_density/100,obj)
      end
     end
    end
    end

  end

  --[[線描画 c]]--
  if checkSEN_C==1 then

    for k=1, #pos_array do
    for l=1, #pos_array[k] do
     obj.alpha = alpha_array[k][l]
     if obj.alpha > 0 then
      local dis_r = math.sqrt((pos_array[k][l][1]-pos_cen_array[k][l][1])^2 + (pos_array[k][l][2]-pos_cen_array[k][l][2])^2 + (pos_array[k][l][3]-pos_cen_array[k][l][3])^2)
      if dis_r < connect_R and dis_r > 0 then
       draw_line_3D(
	pos_cen_array[k][l][1],pos_cen_array[k][l][2],pos_cen_array[k][l][3],
	pos_array[k][l][1],pos_array[k][l][2],pos_array[k][l][3],line_density/100,obj)
      end
     end
    end
    end
   end

obj.alpha=0