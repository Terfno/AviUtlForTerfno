@スティック波形
--track0:幅,1,5000,300
--track1:音量,0,1000,100
--track2:ひねり,-3600,3600,0
--track3:解像度,1,1000,100,1
--dialog:色/col,col_dia="0xffffff";ライン幅%,line_dia=100;原点高さ,OY=0;間隔,x_sukima=0;上下対称にする/chk,checkS=0;

require("function_rotate_T")

--面を描く関数
local function draw_men(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,obj.h
 local x3,y3=obj.w,obj.h
 local x4,y4=obj.w,0

 obj.effect()

 obj.setoption("focus_mode","fixed_size") --フォーカス枠固定

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

local function draw_rectang(x,y,z,rx,ry,rz,side,height)

 --draw_men(),Rot()が必要

 local x_b,y_b,z_b=x,y,z
 local x_t,y_t,z_t=x,y+height,z

 local x0,y0,z0=x_b+side/2,y_b,z_b+side/2
 local x1,y1,z1=x_b+side/2,y_b,z_b-side/2
 local x2,y2,z2=x_b-side/2,y_b,z_b-side/2
 local x3,y3,z3=x_b-side/2,y_b,z_b+side/2

 local x4,y4,z4=x_t+side/2,y_t,z_t+side/2
 local x5,y5,z5=x_t+side/2,y_t,z_t-side/2
 local x6,y6,z6=x_t-side/2,y_t,z_t-side/2
 local x7,y7,z7=x_t-side/2,y_t,z_t+side/2

 x0,y0,z0=Rot(x0,y0,z0,rx,ry,rz)
 x1,y1,z1=Rot(x1,y1,z1,rx,ry,rz)
 x2,y2,z2=Rot(x2,y2,z2,rx,ry,rz)
 x3,y3,z3=Rot(x3,y3,z3,rx,ry,rz)

 x4,y4,z4=Rot(x4,y4,z4,rx,ry,rz)
 x5,y5,z5=Rot(x5,y5,z5,rx,ry,rz)
 x6,y6,z6=Rot(x6,y6,z6,rx,ry,rz)
 x7,y7,z7=Rot(x7,y7,z7,rx,ry,rz)

 draw_men(x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3)
 draw_men(x4,y4,z4,x5,y5,z5,x6,y6,z6,x7,y7,z7)

 draw_men(x0,y0,z0,x1,y1,z1,x5,y5,z5,x4,y4,z4)
 draw_men(x1,y1,z1,x2,y2,z2,x6,y6,z6,x5,y5,z5)
 draw_men(x2,y2,z2,x3,y3,z3,x7,y7,z7,x6,y6,z6)
 draw_men(x3,y3,z3,x0,y0,z0,x4,y4,z4,x7,y7,z7)

end

local line=line_dia
local col=col_dia
local x,y,z=0,0,0
local rx,ry,rz=0,0,0

local bufnum=obj.track3
local buf={}
local bufnum_r=obj.getaudio (buf,"audiobuffer","spectrum",bufnum)

local side=obj.track0/bufnum_r
local L=(side+x_sukima)*bufnum_r
local dL=L/bufnum_r
local dtheta=math.rad(obj.track2)

obj.load("figure","四角形",col,100,line)

for i=1,bufnum_r do

 x=(dL)*i-L/2
 rx=i*dtheta/bufnum_r
 height=-obj.track1*buf[i]/1000-OY
 
 if checkS==1 then
  y=-height/2
 end
 
 draw_rectang(x,y,z,rx,ry,rz,side,height) 

end

@カラフルスティック
--track0:長さ,1,1500,100
--track1:幅,0,5000,300
--track2:音量,0,1000,100
--track3:解像度,1,1000,100,1
--dialog:ライン幅%,line_dia=100;ずらし,dz_dia=0;ひねり,dth_dia=0;色ベース,colbase=0;色シフト,colshift=1;

require("function_rotate_T")

--面を描く関数
local function draw_men(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,obj.h
 local x3,y3=obj.w,obj.h
 local x4,y4=obj.w,0

 obj.effect()

 obj.setoption("focus_mode","fixed_size") --フォーカス枠固定

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

local line=line_dia

local bufnum=obj.track3
local buf={}
local bufnum_r=obj.getaudio (buf,"audiobuffer","spectrum",bufnum)

local dtheta=math.rad(obj.track1)
local dth=dth_dia
local dz=dz_dia

local K_buf=obj.track2/100000

local L=obj.track1
local side_1=L/bufnum_r
local side_2=obj.track0

obj.load("figure","四角形","0xffffff",100,line)

for i=1,bufnum_r do

  x=i*side_1-L/2-side_1/2
  z=dz

  P1x,P1y,P1z=x+side_1/2,0,z+side_2/2
  P2x,P2y,P2z=x+side_1/2,0,z-side_2/2
  P3x,P3y,P3z=x-side_1/2,0,z-side_2/2
  P4x,P4y,P4z=x-side_1/2,0,z+side_2/2
  P1x,P1y,P1z=Rot_x(P1x,P1y,P1z,buf[i]*K_buf+dth*i/bufnum)
  P2x,P2y,P2z=Rot_x(P2x,P2y,P2z,buf[i]*K_buf+dth*i/bufnum)
  P3x,P3y,P3z=Rot_x(P3x,P3y,P3z,buf[i]*K_buf+dth*i/bufnum)
  P4x,P4y,P4z=Rot_x(P4x,P4y,P4z,buf[i]*K_buf+dth*i/bufnum)

  --色の部分は野生氏のを借りた
  index = i
  total=bufnum
  colh = colbase + 360 * index * colshift / total
  pw = math.min(buf[i], 4096)
  cols = math.min(100 * pw / 512, 100)

  obj.effect("単色化","強さ",100,"輝度を保持する",0,"color",HSV(colh,cols,100))

  draw_men(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

end

@ワイヤー立方体
--track0:幅,1,1500,300
--track1:縦横比,-100,100,0
--track2:音量,0,3600,50
--track3:解像度,1,1000,20,1
--dialog:色/col,col_dia="0xffffff";ライン幅,line_dia=5;隙間x,sukimax_dia=3;隙間y,sukimay_dia=3;

require("function_rotate_T")

--面を描く関数
local function draw_men(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,obj.h
 local x3,y3=obj.w,obj.h
 local x4,y4=obj.w,0

 obj.effect()

 obj.setoption("focus_mode","fixed_size") --フォーカス枠固定

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

local function draw_rectang(x,y,z,rx,ry,rz,side,height)

 --draw_men(),Rot()が必要

 local x_b,y_b,z_b=x,y,z
 local x_t,y_t,z_t=x,y+height,z

 local x0,y0,z0=x_b+side/2,y_b,z_b+side/2
 local x1,y1,z1=x_b+side/2,y_b,z_b-side/2
 local x2,y2,z2=x_b-side/2,y_b,z_b-side/2
 local x3,y3,z3=x_b-side/2,y_b,z_b+side/2

 local x4,y4,z4=x_t+side/2,y_t,z_t+side/2
 local x5,y5,z5=x_t+side/2,y_t,z_t-side/2
 local x6,y6,z6=x_t-side/2,y_t,z_t-side/2
 local x7,y7,z7=x_t-side/2,y_t,z_t+side/2

 x0,y0,z0=Rot(x0,y0,z0,rx,ry,rz)
 x1,y1,z1=Rot(x1,y1,z1,rx,ry,rz)
 x2,y2,z2=Rot(x2,y2,z2,rx,ry,rz)
 x3,y3,z3=Rot(x3,y3,z3,rx,ry,rz)

 x4,y4,z4=Rot(x4,y4,z4,rx,ry,rz)
 x5,y5,z5=Rot(x5,y5,z5,rx,ry,rz)
 x6,y6,z6=Rot(x6,y6,z6,rx,ry,rz)
 x7,y7,z7=Rot(x7,y7,z7,rx,ry,rz)

 draw_men(x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3)
 draw_men(x4,y4,z4,x5,y5,z5,x6,y6,z6,x7,y7,z7)

 draw_men(x0,y0,z0,x1,y1,z1,x5,y5,z5,x4,y4,z4)
 draw_men(x1,y1,z1,x2,y2,z2,x6,y6,z6,x5,y5,z5)
 draw_men(x2,y2,z2,x3,y3,z3,x7,y7,z7,x6,y6,z6)
 draw_men(x3,y3,z3,x0,y0,z0,x4,y4,z4,x7,y7,z7)

end

local function hexa_line(x,y,z,rx,ry,rz,k,asp,length,sukima)
 h_num=length/k
 local side,height=k*2,k*2
 if asp>0 then side=side*(1-asp/100) else height=height*(1+asp/100) end

 for i=i_s,h_num do
   draw_rectang(x,y-i*(k+sukima)*2,z,rx,ry,rz,side,height)
 end
end

local size=100
local col=col_dia
local line=line_dia
local x,y,z=0,0,0
local rx,ry,rz=0,0,0
local asp=obj.track1
local height=obj.track2

local bufnum=obj.track3
local buf={}
local bufnum_r=obj.getaudio (buf,"audiobuffer","spectrum",bufnum)

local K_buf=obj.track2/1000

local L=obj.track1
local side_1=L/bufnum_r
local side_2=100

local sukimax=sukimax_dia
local sukimay=sukimay_dia

local k=obj.track0/obj.track3

local height

obj.load("figure","四角形",col,size,line)

for i=1,bufnum_r do

 x=i*(k+sukimax)-bufnum_r*(k+sukimax)/2
 height=buf[i]*K_buf

 hexa_line(x,y,z,rx,ry,rz,k/2,asp,height,sukimay)

end

@リング波形
--track0:基準サイズ,0,1500,10
--track1:幅,0,1000,500
--track2:音量,0,3600,300
--track3:解像度,1,10000,20,1
--dialog:図形/fig,fig_dia="円";色/col,col_dia="0xffffff";ライン幅,line_dia=2;

local fig=fig_dia
local col=col_dia
local line=line_dia
local x,y,z=0,0,0
local rx,ry,rz=0,90,0
local o_size=obj.track0

local bufnum=obj.track3
local buf={}
local bufnum_r=obj.getaudio (buf,"audiobuffer","spectrum",bufnum)

local K_buf=obj.track2/10000

local L=obj.track1
local dL=L/bufnum_r

obj.setoption("focus_mode","fixed_size") --フォーカス枠固定

for i=1,bufnum_r do
 size=o_size+buf[i]*K_buf
 obj.load("figure",fig,col,size,line)
 x=dL*i-L/2
 obj.draw(x,y,z,1,1,rx,ry,rz)
end

@同心リング
--track0:基準サイズ,0,1500,10
--track1:半径,0,1000,200
--track2:音量,0,3600,100
--track3:解像度,1,1000,20,1
--dialog:図形/fig,fig_dia="円";色/col,col_dia="0xffffff";ライン幅%,line_dia=2;

local size=100
local fig=fig_dia
local col=col_dia
local line=line_dia
local x,y,z=0,0,0
local rx,ry,rz=0,0,0
local o_size=obj.track0

local bufnum=obj.track3
local buf={}
local bufnum_r=obj.getaudio (buf,"audiobuffer","spectrum",bufnum)

local K_buf=obj.track2/1000

obj.setoption("focus_mode","fixed_size") --フォーカス枠固定

for i=1,bufnum_r do
 size=o_size+i*obj.track1/bufnum_r
 obj.load("figure",fig,col,size,line)
 y=buf[i]/10000*obj.track2
 obj.draw(0,y,0,1,1,-90,0,0)
end

@球面波形
--track0:サイズ,0,1500,100
--track1:中心高さ%,0,100,50
--track2:音量,0,1000,50
--track3:表示%,0,100,100
--dialog:緯度分割数,num_e=100;経度分割数,num_k=100;色/col,col="0xffffff";

local size=obj.track0

local bufnum=num_e
local buf={}
local bufnum_r=obj.getaudio (buf,"audiobuffer","spectrum",bufnum)

local K_buf=-obj.track2/100000*num_k

--球の描画は拡張編集のを引用
obj.setoption('antialias',0)	
local r = size*obj.getvalue("zoom")/100
local w = bufnum_r
local h = num_k
local x_end=(w-1)*obj.track3/100 --追加部分
local bufshift=obj.track1*num_k/100--追加部分

for y=0,h-1 do
	y0 = -r*math.cos(math.pi*y    /h)
	r0 =  r*math.sin(math.pi*y    /h)
	y1 = -r*math.cos(math.pi*(y+1)/h)
	r1 =  r*math.sin(math.pi*(y+1)/h)
	v0 = obj.h*y    /h;
	v1 = obj.h*(y+1)/h;
	for x=0,x_end do --変更部分
          if buf[x+1]*K_buf+bufshift<y and y<bufshift and x_end>0 then --追加部分
		x0 =  r0*math.sin(math.pi*2*x    /w)
		x1 =  r0*math.sin(math.pi*2*(x+1)/w)
		x2 =  r1*math.sin(math.pi*2*(x+1)/w)
		x3 =  r1*math.sin(math.pi*2*x    /w)
		z0 = -r0*math.cos(math.pi*2*x    /w)
		z1 = -r0*math.cos(math.pi*2*(x+1)/w)
		z2 = -r1*math.cos(math.pi*2*(x+1)/w)
		z3 = -r1*math.cos(math.pi*2*x    /w)
		u0 = obj.w*x    /w;
		u1 = obj.w*(x+1)/w;
                obj.load("figure","四角形",col,1)
		obj.drawpoly(x0,y0,z0,x1,y0,z1,x2,y1,z2,x3,y1,z3,u0,v0,u1,v0,u1,v1,u0,v1)
          end
	end
end
obj.setoption("focus_mode","fixed_size")

@ウェイブ
--track0:音量,0,500,25
--track1:x間隔,0,1000,30
--track2:z間隔,0,1000,30
--track3:点サイズ,0,1000,10,1
--dialog:格子線を引く/chk,checkLINE=0;縦の線を引く/chk,checkLINE2=0;X方向の数,x_num=20;Z方向の数,z_num=20;点図形/fig,fig="円";点の色/col,col="0xffffff";(点)カメラを向く/chk,checkCAM=1;線の色/col,col_s="0xffffff";線のサイズ%,size_s_dia=40;線の濃さ,density_dia=20;平均化回数,mean_num=3;回転[点⇒全体]/chk,checkZEN=1;

--[[

 注意
　 ・カーソルを逆に動かしたときは正常に動かない
 　・設定変更時に1フレーム前に進んでしまう

]]--

require("function_rotate_T")

--線を引く関数
local function draw_line_3D(x0,y0,z0,x1,y1,z1,density,obj,rx,ry,rz)

 local L=math.sqrt((x1-x0)^2+(y1-y0)^2+(z1-z0)^2)
 local N=L*density

 local dx=(x1-x0)/N
 local dy=(y1-y0)/N
 local dz=(z1-z0)/N
 local x,y,z=0,0,0

 for i=1,N do
  x=x0+dx*i
  y=y0+dy*i
  z=z0+dz*i
  obj.draw(x,y,z,1,1,-rx,-ry,-rz)
 end

 --obj.draw(x1,y1,z1)

end

--上下をカットする関数
local function cut(val,min,max)
 if val > max then return max end
 if val < min then return min end
 return val
end

local spect_num=z_num
local num=x_num
local dx=obj.track1
local dz=obj.track2
local shift_x=dx*num/2
local shift_z=dz*spect_num/2
local p=-obj.track0
local density=density_dia/100
local size=obj.track3
local size_s=size*size_s_dia/100
local x,y,z,rx,ry,rz
if checkZEN==1 then
 rx,ry,rz=obj.getvalue("rx"),obj.getvalue("ry"),obj.getvalue("rz")
else
 rx,ry,rz=0,0,0
end

obj.load("figure",fig,col,size)
if checkCAM==1 then
 obj.setoption("billboard",3)
end

buf={}
obj.getaudio(buf,"audiobuffer","spectrum",spect_num)

if buf_data==nil or obj.time==0 then
 buf_data={}
 for j=1,spect_num do
  buf_data[j]={}
  for i=2,num do
   buf_data[j][i]=0
  end
 end
elseif buf_data[spect_num][num]==nil then
 buf_data={}
 for j=1,spect_num do
  buf_data[j]={}
  for i=2,num do
   buf_data[j][i]=0
  end
 end
end

--現在の音量を一番目に代入
for j=1,spect_num do
  buf_data[j][1]=buf[j]
end

--data平均化
buf_data_m={}
for j=1,spect_num do
 buf_data_m[j]={}
end

for j=1,spect_num do
 for i=1,num do
  buf_data_m[j][i]=buf_data[j][i]
 end
end

if mean_num>0 then

 for k=1,mean_num do
  for j=1,spect_num do
    buf_data_m[j][1]=buf_data_m[j][1]
   for i=1+1,num-1 do
    buf_data_m[j][i]=(buf_data_m[j][i-1]+buf_data_m[j][i]+buf_data_m[j][i+1])/3
   end
    buf_data_m[j][num]=buf_data_m[j][num]
  end
 end

 for k=1,mean_num do
  for i=1,num do
    buf_data_m[1][i]=buf_data_m[1][i]
   for j=1+1,spect_num do
    buf_data_m[j][i]=(buf_data_m[j-1][i]+buf_data_m[j][i])/2
   end
  end
 end

end

--表示(点)
for j=1,spect_num do
 for i=1,num do
  x=dx*i-shift_x
  y=p*buf_data_m[j][i]/100
  z=dz*j-shift_z
  if checkZEN==1 then
    x,y,z=Rot(x,y,z,math.rad(rx),math.rad(ry),math.rad(rz))
  end
  obj.draw(x,y,z,1,1,-rx,-ry,-rz)
 end
end

--表示(線)
if checkLINE==1 then
 local x0,y0,z0,x1,y1,z1
 obj.load("figure","円",col_s,size_s)
 obj.setoption("billboard",3)

 for j1=1,spect_num do
 for j0=1,spect_num do
  for i1=1,num do
  for i0=1,num do
   if (i1==i0+1 and j1==j0) or (j1==j0+1 and i1==i0) then
    x0=dx*i0-shift_x
    y0=p*buf_data_m[j0][i0]/100
    z0=dz*j0-shift_z
    x1=dx*i1-shift_x
    y1=p*buf_data_m[j1][i1]/100
    z1=dz*j1-shift_z
    if checkZEN==1 then
     x0,y0,z0=Rot(x0,y0,z0,math.rad(rx),math.rad(ry),math.rad(rz))
     x1,y1,z1=Rot(x1,y1,z1,math.rad(rx),math.rad(ry),math.rad(rz))
    end
    draw_line_3D(x0,y0,z0,x1,y1,z1,density,obj,rx,ry,rz)
   end
  end
  end
 end
 end
end

--表示(線)
if checkLINE2==1 then
 local x0,y0,z0,x1,y1,z1
 obj.load("figure","円",col_s,size_s)
 obj.setoption("billboard",3)

 for j0=1,spect_num do
  for i0=1,num do
    x0=dx*i0-shift_x
    y0=p*buf_data_m[j0][i0]/100
    z0=dz*j0-shift_z
    x1=x0
    y1=0
    z1=z0
    if checkZEN==1 then
     x0,y0,z0=Rot(x0,y0,z0,math.rad(rx),math.rad(ry),math.rad(rz))
     x1,y1,z1=Rot(x1,y1,z1,math.rad(rx),math.rad(ry),math.rad(rz))
    end
    draw_line_3D(x0,y0,z0,x1,y1,z1,density,obj,rx,ry,rz)
  end
 end
end

--時間をずらして保存
if tempframe==nil then
 --動画再生時にだけ動くように
 tempframe=obj.frame

else

 if obj.frame>tempframe then 
  for j=1,spect_num do
   for i=num,2,-1 do
    buf_data[j][i]=buf_data[j][i-1]
   end
  end
 end

end

tempframe=obj.frame