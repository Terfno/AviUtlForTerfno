@正二十面体
--track0:サイズ,1,800,100
--track1:ライン幅,0,4000,15,1
--track3:精度,0,1000,200
--dialog:色/col,col="0xffffff";

local seido=obj.track3/100
local size=obj.track0*seido
local line=obj.track1*seido

--面を描く関数(3,4点を引数)
local draw_men=function(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,0
 local x3,y3=0,0
 local x4,y4=0,0

 local sukima=10--隙間対策(三角形の場合、少し内側の三角形をとる)

 if(P4x==nil and P4y==nil and P4z==nil)then
  P4x,P4y,P4z=P3x,P3y,P3z
  obj.load("figure","三角形",col,size,line)
  L=3/4*size/math.cos(math.rad(30))
  x1,y1=size/2-L/2+sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x2,y2=size/2+L/2-sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x3,y3=size/2,0+sukima
  x4,y4=x3,y3
 else
  obj.load("figure","四角形",col,size,line)
  x1,y1=0,0
  x2,y2=0,obj.h
  x3,y3=obj.w,obj.h
  x4,y4=obj.w,0
 end 

 obj.effect()

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

--正二十面体を描く関数(draw_menが定義されている状態)
local draw_icos=function(k)

 sqrt=math.sqrt
 G=(1+sqrt(5))/2--黄金比

 P={}
 P[1]={1,G,0}
 P[2]={1,-G,0}
 P[3]={-1,G,0}
 P[4]={-1,-G,0}
 P[5]={0,1,G}
 P[6]={0,1,-G}
 P[7]={0,-1,G}
 P[8]={0,-1,-G}
 P[9]={G,0,1}
 P[10]={G,0,-1}
 P[11]={-G,0,1}
 P[12]={-G,0,-1}

 for i=1,12 do
  P[i][1],P[i][2],P[i][3]=k*P[i][1],k*P[i][2],k*P[i][3]
 end

 --一周
 i1,i2,i3=10,9,1
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=9,1,5
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=1,5,3
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=5,3,11
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=3,11,12
  draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=11,12,4
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=12,4,8
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=4,8,2
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=8,2,10
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=2,10,9
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 --7,6を頂点にした五角錐の側面
 i1,i2,i3=6,10,1
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=7,9,5
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=6,1,3
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=7,5,11
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=6,3,12
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=7,11,4
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=6,12,8
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=7,4,2
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=6,8,10
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=7,2,9
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])

end

--関数化した意味はあったのか
draw_icos(obj.track0)

@正八面体
--track0:サイズ,1,1500,150
--track1:ライン幅,0,4000,30,1
--track3:精度,0,1000,200
--dialog:色/col,col="0xffffff";

local seido=obj.track3/100
local size=obj.track0*seido
local line=obj.track1*seido

--面を描く関数(3,4点を引数)
draw_men=function(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,0
 local x3,y3=0,0
 local x4,y4=0,0

 local sukima=10--隙間対策

 if(P4x==nil and P4y==nil and P4z==nil)then
  P4x,P4y,P4z=P3x,P3y,P3z
  obj.load("figure","三角形",col,size,line)
  L=3/4*size/math.cos(math.rad(30))
  x1,y1=size/2-L/2+sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x2,y2=size/2+L/2-sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x3,y3=size/2,0+sukima
  x4,y4=x3,y3
 else
  obj.load("figure","四角形",col,size,line)
  x1,y1=0,0
  x2,y2=0,obj.h
  x3,y3=obj.w,obj.h
  x4,y4=obj.w,0
 end 

 obj.effect()

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

--正八面体を描く関数(draw_menが定義されている状態)
local draw_octa=function(k)

 local R=k
 local L=R*math.cos(math.rad(45))

 local P={}
 P[1]={ 0, R, 0}
 P[2]={ 0,-R, 0}
 P[3]={ L, 0, L}
 P[4]={ L, 0,-L}
 P[5]={-L, 0,-L}
 P[6]={-L, 0, L}

 i1,i2,i3=1,3,4
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=1,4,5
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=1,5,6
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=1,6,3
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=2,3,4
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=2,4,5
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=2,5,6
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 i1,i2,i3=2,6,3
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])

end

--関数化した意味はあったのか
draw_octa(obj.track0)

@正六面体
--track0:サイズ,1,1500,100
--track1:ライン幅,0,4000,20,1
--track3:精度,0,1000,200
--dialog:色/col,col="0xffffff";

local seido=obj.track3/100
local size=obj.track0*seido
local line=obj.track1*seido

--面を描く関数(3,4点を引数)
draw_men=function(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,0
 local x3,y3=0,0
 local x4,y4=0,0

 local sukima=10--隙間対策

 if(P4x==nil and P4y==nil and P4z==nil)then
  P4x,P4y,P4z=P3x,P3y,P3z
  obj.load("figure","三角形",col,size,line)
  L=3/4*size/math.cos(math.rad(30))
  x1,y1=size/2-L/2+sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x2,y2=size/2+L/2-sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x3,y3=size/2,0+sukima
  x4,y4=x3,y3
 else
  obj.load("figure","四角形",col,size,line)
  x1,y1=0,0
  x2,y2=0,obj.h
  x3,y3=obj.w,obj.h
  x4,y4=obj.w,0
 end 

 obj.effect()

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

--正六面体を描く関数(draw_menが定義されている状態)
local draw_hexa=function(k)

 local P={}
 P[1]={-1,-1,-1}
 P[2]={ 1,-1,-1}
 P[3]={ 1, 1,-1}
 P[4]={ 1, 1, 1}
 P[5]={-1, 1, 1}
 P[6]={-1,-1, 1}
 P[7]={-1, 1,-1}
 P[8]={ 1,-1, 1} 
 
 for i=1,8 do
  P[i][1],P[i][2],P[i][3]=k*P[i][1],k*P[i][2],k*P[i][3]
 end
 
 i1,i2,i3,i4=5,4,3,7
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3],P[i4][1],P[i4][2],P[i4][3])
 i1,i2,i3,i4=6,8,2,1
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3],P[i4][1],P[i4][2],P[i4][3])
 i1,i2,i3,i4=5,6,8,4
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3],P[i4][1],P[i4][2],P[i4][3])
 i1,i2,i3,i4=4,8,2,3
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3],P[i4][1],P[i4][2],P[i4][3])
 i1,i2,i3,i4=3,2,1,7
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3],P[i4][1],P[i4][2],P[i4][3])
 i1,i2,i3,i4=7,1,6,5
 draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3],P[i4][1],P[i4][2],P[i4][3]) 

end

--関数化した意味はあったのか
draw_hexa(obj.track0)

@正四面体
--track0:サイズ,1,1500,150
--track1:ライン幅,0,4000,40,1
--track3:精度,0,1000,200
--dialog:色/col,col="0xffffff";

local seido=obj.track3/100
local size=obj.track0*seido
local line=obj.track1*seido

--面を描く関数(3,4点を引数)
draw_men=function(P1x,P1y,P1z,P2x,P2y,P2z,P3x,P3y,P3z,P4x,P4y,P4z)

 local x1,y1=0,0
 local x2,y2=0,0
 local x3,y3=0,0
 local x4,y4=0,0

 local sukima=10--隙間対策

 if(P4x==nil and P4y==nil and P4z==nil)then
  P4x,P4y,P4z=P3x,P3y,P3z
  obj.load("figure","三角形",col,size,line)
  L=3/4*size/math.cos(math.rad(30))
  x1,y1=size/2-L/2+sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x2,y2=size/2+L/2-sukima*math.cos(math.rad(30)),3/4*size-sukima*math.sin(math.rad(30))
  x3,y3=size/2,0+sukima
  x4,y4=x3,y3
 else
  obj.load("figure","四角形",col,size,line)
  x1,y1=0,0
  x2,y2=0,obj.h
  x3,y3=obj.w,obj.h
  x4,y4=obj.w,0
 end 

 obj.effect()

 obj.drawpoly(
  P1x,P1y,P1z,
  P2x,P2y,P2z,
  P3x,P3y,P3z,
  P4x,P4y,P4z,                       
  x1,y1,x2,y2,x3,y3,x4,y4)

end

--正四面体を描く関数(draw_menが定義されている状態)
local draw_tetra=function(k)

 local R=k
 local R2=R*math.cos(math.rad(90+109.5))

 local P={}
 P[1]={0,-R,0}
 P[2]={R2*math.cos(math.rad(0)),-R*math.sin(math.rad(180-(180-109.5-90))),R2*math.sin(math.rad(0))}
 P[3]={R2*math.cos(math.rad(120)),-R*math.sin(math.rad(180-(180-109.5-90))),R2*math.sin(math.rad(120))}
 P[4]={R2*math.cos(math.rad(240)),-R*math.sin(math.rad(180-(180-109.5-90))),R2*math.sin(math.rad(240))}

 for i=1,4 do
  i1=i%4+1
  i2=(i+1)%4+1
  i3=(i+2)%4+1
  draw_men(P[i1][1],P[i1][2],P[i1][3],P[i2][1],P[i2][2],P[i2][3],P[i3][1],P[i3][2],P[i3][3])
 end

end

--関数化した意味はあったのか
draw_tetra(obj.track0)