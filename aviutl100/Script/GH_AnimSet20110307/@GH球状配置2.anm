@GH球状配置2-1（定義のみ）
--track0:極スケール,0,100,100
--track1:Xスケール,0,1000,100
--track2:Yスケール,0,1000,100
--track3:Zスケール,0,1000,100
--check0:両極のオブジェクトも描く,0
--
-- ●極スケール
--　　　赤道上のオブジェクトのサイズを100%と考えた場合の両極のオブジェクトのスケールを表す。
--　　　極と赤道の間のオブジェクトは、「極スケールの値〜100%」の間で段階的にリサイズされる。
--　　　オブジェクトを同じ大きさで並べると極に近いほどオブジェクトが密集するので、
--　　　それなら極に近いほどリサイズで小さくして密度を緩和してみるか〜というのが目的。
--　　　「極に近いほど大きくする」というのは使わないと思うので値の上限は100に変更しました。
--
-- ●X,Y,Zスケール
--　　　配置座標値のスケーリングを行なうもの。
--　　　オブジェクトのサイズには影響しない。
--
-- ●両極のオブジェクトも描く
--　　　両極のオブジェクトも描きます。
--　　　両極のオブジェクトは「向き」や「自転」の影響を受けないので、
--　　　描かないほうが自然な場合が多いかなと思い、デフォルトではOFFとなっています。
--
pscale=obj.track0
xscale=obj.track1
yscale=obj.track2
zscale=obj.track3
pdraw=obj.check0

@GH球状配置2-2（描画）
--track0:経線頂点,1,50,10
--track1:緯線頂点,1,50,10
--track2:半径,1,1000,100
--track3:自転,-3600,3600,0
--param:dir=3;
--
-- ★計算の都合上、左に90度回転(Z軸回転-90度)した形で球を形づくります。
--　　まっすぐ立てたい場合はグループ制御を加え、
--　　グループ制御のZ軸回転を90度にすればOKです。
--
-- ●経線頂点
--　　　経線上のオブジェクトの数。両極のオブジェクトは含めない。
--
-- ●緯線頂点
--　　　緯線上のオブジェクトの数。
--
-- ●向き
--　　　各オブジェクトの向きを指定します。
--　　　球の外側・内側を向けるようになったので、
--　　　両極のオブジェクトも向きの影響を受けるように変更しました。
--　　　北極が0度の経線、南極が180度の経線に従うようなイメージ。
--　　　　　-1：指定なし（カメラ制御の「カメラのほうを向く」を使う場合はこれを指定して下さい）
--　　　　　0：正面を向く
--　　　　　1：軸の外側を向く
--　　　　　2：軸の内側を向く
--　　　　　3：球の外側を向く
--　　　　　4：球の内側を向く
--
-- ●自転
--　　　両極を結ぶ軸で回転させます。
--　　　両極のオブジェクトも向きとあわせて自転の影響を受けるように変更しました。
--
keisen = math.floor(obj.track0)
isen = math.floor(obj.track1)
r = obj.track2
rotshift = obj.track3
for i=0,keisen-1 do
  if(pdraw) then
    ry = 90 - 180/(keisen+1) * (i+1) -- 極を考えて均等配置
  else
    ry = 90 - 90/keisen - 180/keisen * i  -- 極を考えずに均等配置
  end
  radY=math.rad(ry)
  -- リサイズ計算はKENくん方式を踏まえてmath.cos()を使うように改修
  zm = ((100-pscale)*math.cos(radY) + pscale) / 100
  -- 角度に対して線形にリサイズしていたときの式
  --  zm=(100 - (100-pscale)/90*math.abs(ry)) / 100
  for j=0,isen-1 do
    rx = 360/isen * j + rotshift
    rz = -90
    radX = math.rad(rx)
    px = -r * math.sin(radY) * xscale/100
    py = r * math.sin(radX) * math.cos(radY) * yscale/100
    pz = -r * math.cos(radX) * math.cos(radY) * zscale/100
    if(dir==-1) then -- 指定なし
      rx = 0
      ry = 0
      rz = 0
    elseif(dir==0) then -- 正面を向く
      rx = 0
      ry = 0
    elseif(dir==1) then -- 球の軸の外側を向く
      ry=0
    elseif(dir==2) then -- 球の軸の内側を向く
      rx=rx+180
      ry=0
    elseif(dir==4) then -- 球の中心を向く
      px=-px
      py=-py
      pz=-pz
    end
    obj.draw(px,py,pz,zm,1,rx,ry,rz)
  end
end
if(pdraw) then -- 両極のオブジェクトを描く
  -- 北極が0度経線、南極が180度経線に従うようにする。
  px = r*xscale/100
  zm = pscale/100
  if(dir==-1) then -- 指定なし
    obj.draw(-px,0,0,zm,1,0,0,0)
    obj.draw(px,0,0,zm,1,0,0,0)
  elseif(dir==0) then -- 正面を向く
    obj.draw(-px,0,0,zm,1,0,0,-90)
    obj.draw(px,0,0,zm,1,0,0,-90)
  elseif(dir==1) then -- 球の軸の外側を向く場合
    obj.draw(-px,0,0,zm,1,rotshift,0,-90)
    obj.draw(px,0,0,zm,1,rotshift+180,0,-90)
  elseif(dir==2) then -- 球の軸の内側を向く場合
    obj.draw(-px,0,0,zm,1,rotshift+180,0,-90)
    obj.draw(px,0,0,zm,1,rotshift,0,-90)
  elseif(dir==3) then -- 球の外側を向く場合
    obj.draw(-px,0,0,zm,1,rotshift,90,-90)
    obj.draw(px,0,0,zm,1,rotshift+180,-90,-90)
  elseif(dir==4) then -- 球の内側を向く場合
    obj.draw(-px,0,0,zm,1,rotshift+180,-90,-90)
    obj.draw(px,0,0,zm,1,rotshift,90,-90)
  end
end